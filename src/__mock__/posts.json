[
  {
      "id": "c3fdb65f-1764-4db9-bdca-df75d381b85d",
      "title": "JavaScript Optimization: 10 Proven Techniques for Faster Code",
      "author": "Kevin Diesenberg",
      "content": "Setting Up Next.js\nNext.js is a popular framework for server-side rendered React applications. To create a new Next.js app, you can use create-next-app:\n\nFetching Data for Server-Side Rendering\nNext.js provides a function called getServerSideProps that you can use to fetch data on the server before rendering a page. This function should return an object with a props property, which will be passed to your page component.\n\nConclusion\nServer-side rendering in React.js can significantly improve the user experience of your application by reducing the time to first paint and improving SEO. Next.js makes it easy to build server-rendered React.js applications, but this guide only scratches the surface of what you can do with Next.js.\n\nIn the next post, we’ll explore how to implement routing in React.js applications. Until then, happy coding!",
      "created": 1686928089946
  },
  {
      "id": "629e2dac-a068-44c3-a3ff-d63cbadb825f",
      "title": "Higher-order Components in React.js",
      "author": "Dimitar Lee",
      "content": "Higher-order components (HOCs) are a powerful and flexible pattern in React that allows you to reuse component logic. In this post, we’ll explore what HOCs are, how they work, and how you can use them in your React applications.\n\nWhat are Higher-order Components?\nA higher-order component is a function that takes a component and returns a new component with additional functionality. The original component is not modified in any way, but the new component can use the original component as a child component and pass down additional props.\n\nIn this example, withLoading is a higher-order component that takes a Component as an argument and returns a new component called WithLoading. WithLoading is responsible for fetching data and setting the loading state. It then renders the original Component with the loading prop.\n\nHow do Higher-order Components work?\nHigher-order components work by wrapping a component with additional functionality. When you use a higher-order component, you’re actually creating a new component that includes the original component as a child component.\n\nHere’s an example of how you might use the withLoading higher-order component:\nIn this example, we’re using the withLoading higher-order component to create a new component called MyComponentWithLoading. We're then rendering MyComponentWithLoading in our App component.\n\nWhen MyComponentWithLoading is rendered, it will call the WithLoading component, which will fetch data and set the loading state. It will then render the original MyComponent component with the loading prop.",
      "created": 1686927835681
  },
  {
      "id": "5818ce05-9e48-4b64-963c-43509bb5c275",
      "title": "Learn Next.js By Building Your First Next.js App From Scratch",
      "author": "Lorenzo Zarantonello",
      "content": "While this post will help you build a Next.js app from scratch, you should have some knowledge of HTML, CSS, JavaScript, React, and related web development concepts before jumping into it.\n\nMost of the code we are going to touch is inside pages/index.js but we will also see what are the other folders and when we should use them.\n\nBelow you can see the application structure and a brief explanation of each top-level folder and file.\nThe .next folder is automatically generated by Next.js during the build process. It contains the compiled and optimized output of your Next.js app other than information to run the app properly.\nThe node_modules contains all the external packages and libraries that your project depends on.\npages contains the React components that represent the different pages or routes of your application. Each file in this folder corresponds to a unique URL, and we will explore this in the next section.\npublic contains static assets like images, fonts, and other files that need to be served as-is without any processing.\nstyles contains your CSS or SCSS files. We will see later that in some cases, we may want to store CSS files elsewhere.\nThis standard structure allows for efficient maintenance and separation of concerns in your app. It is a good idea not to change it:)",
      "created": 1686927786279
  },
  {
      "id": "cf608411-c3bd-4b47-a523-9d3424d94567",
      "title": "UX Case Study — Continuous Discovery at BAS World",
      "author": "Dariush Cyrroes",
      "content": "Building trust with customers and creating transparancy to improve the overall experience of buying new and used vehicles, construction machinery and commercial vehicles.\n\nEveryday thousands of users around the world search for their future transport vehicle or machine on BAS World. To bring this experience to life a bit more, we went on to search for the optimal Continuous Discovery set up for our Product Team and find out what our customers really want.\n\nOne of the worlds largest traders in trucks, trailers, machinery, commercial vehicles and plenty more. BAS World is a leading online trading platform aiming on mainly the European, South American, African and Asian markets.\n\nWith over half a million monthly visitors and over 10,400 acres of stock BAS World is one of the main drivers within the BAS Group. Innovating services within the industry and with over 25 years of expertise.\n\nHowever the online platform itself is relatively young, being released in the third quarter of 2021. There is a lot to explore for our Products and many new business initiatives lie ahead.",
      "created": 1686927658881
  },
  {
      "id": "00a2d30c-29e9-49c7-a771-be62f09eefc4",
      "title": "JavaScript Optimization: 10 Proven Techniques for Faster Code",
      "author": "Kevin Diesenberg",
      "content": "Setting Up Next.js\nNext.js is a popular framework for server-side rendered React applications. To create a new Next.js app, you can use create-next-app:\n\nFetching Data for Server-Side Rendering\nNext.js provides a function called getServerSideProps that you can use to fetch data on the server before rendering a page. This function should return an object with a props property, which will be passed to your page component.\n\nConclusion\nServer-side rendering in React.js can significantly improve the user experience of your application by reducing the time to first paint and improving SEO. Next.js makes it easy to build server-rendered React.js applications, but this guide only scratches the surface of what you can do with Next.js.\n\nIn the next post, we’ll explore how to implement routing in React.js applications. Until then, happy coding!",
      "created": 1686928089946
  },
  {
      "id": "bb430492-3042-47ad-9901-fb023eab1cb1",
      "title": "Higher-order Components in React.js",
      "author": "Dimitar Lee",
      "content": "Higher-order components (HOCs) are a powerful and flexible pattern in React that allows you to reuse component logic. In this post, we’ll explore what HOCs are, how they work, and how you can use them in your React applications.\n\nWhat are Higher-order Components?\nA higher-order component is a function that takes a component and returns a new component with additional functionality. The original component is not modified in any way, but the new component can use the original component as a child component and pass down additional props.\n\nIn this example, withLoading is a higher-order component that takes a Component as an argument and returns a new component called WithLoading. WithLoading is responsible for fetching data and setting the loading state. It then renders the original Component with the loading prop.\n\nHow do Higher-order Components work?\nHigher-order components work by wrapping a component with additional functionality. When you use a higher-order component, you’re actually creating a new component that includes the original component as a child component.\n\nHere’s an example of how you might use the withLoading higher-order component:\nIn this example, we’re using the withLoading higher-order component to create a new component called MyComponentWithLoading. We're then rendering MyComponentWithLoading in our App component.\n\nWhen MyComponentWithLoading is rendered, it will call the WithLoading component, which will fetch data and set the loading state. It will then render the original MyComponent component with the loading prop.",
      "created": 1686927835681
  },
  {
      "id": "7970ec9e-4c28-40d6-a0b9-11cca8131977",
      "title": "Learn Next.js By Building Your First Next.js App From Scratch",
      "author": "Lorenzo Zarantonello",
      "content": "While this post will help you build a Next.js app from scratch, you should have some knowledge of HTML, CSS, JavaScript, React, and related web development concepts before jumping into it.\n\nMost of the code we are going to touch is inside pages/index.js but we will also see what are the other folders and when we should use them.\n\nBelow you can see the application structure and a brief explanation of each top-level folder and file.\nThe .next folder is automatically generated by Next.js during the build process. It contains the compiled and optimized output of your Next.js app other than information to run the app properly.\nThe node_modules contains all the external packages and libraries that your project depends on.\npages contains the React components that represent the different pages or routes of your application. Each file in this folder corresponds to a unique URL, and we will explore this in the next section.\npublic contains static assets like images, fonts, and other files that need to be served as-is without any processing.\nstyles contains your CSS or SCSS files. We will see later that in some cases, we may want to store CSS files elsewhere.\nThis standard structure allows for efficient maintenance and separation of concerns in your app. It is a good idea not to change it:)",
      "created": 1686927786279
  },
  {
      "id": "6a655e28-0eaf-49ad-b0bd-255a54036165",
      "title": "UX Case Study — Continuous Discovery at BAS World",
      "author": "Dariush Cyrroes",
      "content": "Building trust with customers and creating transparancy to improve the overall experience of buying new and used vehicles, construction machinery and commercial vehicles.\n\nEveryday thousands of users around the world search for their future transport vehicle or machine on BAS World. To bring this experience to life a bit more, we went on to search for the optimal Continuous Discovery set up for our Product Team and find out what our customers really want.\n\nOne of the worlds largest traders in trucks, trailers, machinery, commercial vehicles and plenty more. BAS World is a leading online trading platform aiming on mainly the European, South American, African and Asian markets.\n\nWith over half a million monthly visitors and over 10,400 acres of stock BAS World is one of the main drivers within the BAS Group. Innovating services within the industry and with over 25 years of expertise.\n\nHowever the online platform itself is relatively young, being released in the third quarter of 2021. There is a lot to explore for our Products and many new business initiatives lie ahead.",
      "created": 1686927658881
  }
]